/*///////////////////////////////////////////////////////////*\
||                                                           ||
||     File:      PamHeaderTests.cpp                         ||
||     Author:    Autogenerated                              ||
||     Generated: 02.01.2022                                 ||
||                                                           ||
\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

#include "PamHeaderTests.hpp"
#include <.stringPool.h>

Wave::Test::PamHeaderTests::PamHeaderTests(void)
    : PerFrameType()
    , writer() {
}

Wave::Test::PamHeaderTests::~PamHeaderTests(void)
{
    cases.Clear();
    writer.Close();
}

int
Wave::Test::PamHeaderTests::runTestCase(const AudioFrameType* frametype)
{ pool_scope
    failed += testSaveToPamFormat(frametype);
    failed += testLoadingPamFiles(frametype);
    return failed;
}

int
Wave::Test::PamHeaderTests::testSaveToPamFormat(const AudioFrameType* frametype)
{ pool_scope
    int fail = 0;
    if (frametype->BitDepth() == 8) {
        PrintLog("SKIPED test: storing 8bit audio to pam file\n");
    } else if( frametype->BitDepth() == 16 && frametype->FormatTag() == PCMf ) {
        PrintLog("SKIPED test: storing 16bit float audio to pam file\n");
    } else try {
        char* trimmingtestleftover = GetFileNameForFrameType( "trimmed", frametype );
        buffer = WaveFileReader( trimmingtestleftover ).Read().outscope();
        char* pamheadertestoutput = GetFileNameForFrameType( "pamheader", frametype );
        writer.Save(buffer, pamheadertestoutput, Wave::WaveFileWriter::PAM);
        PrintLog(pool_setf("below filename: '%s'\n", writer.GetFileName()));
        PrintLog("file saved!\n");
        writer.Close();
        buffer.drop();
    } catch (std::exception ex) {
        PrintLog( pool_setf( "Error loading wav file and storing as pam file: %s\n", ex.what() ) );
        fail = 1;
    } return fail;
}

int
Wave::Test::PamHeaderTests::testLoadingPamFiles( const AudioFrameType* frametype )
{ pool_scope
    int fail = 0;
    if (frametype->BitDepth() == 8) {
        PrintLog("SKIPED test: loading 8bit audio from pam file\n");
    } else try {
        bool _16bitfloat = frametype->BitDepth() == 16 && frametype->FormatTag() == PCMf;
        char* testcasefile = GetFileNameForFrameType( _16bitfloat ? "trimmed" : "pamheader", frametype, "pam" );
        buffer = WaveFileReader(testcasefile).Read().outscope();
        if( _16bitfloat ) {
            AudioFrameType targetType( PCMs, 24, frametype->Channels(), frametype->Rate() );
            buffer.convert( targetType );
            PrintLog( "converting 16bit float pam file to 24bit signed wav file!\n" );
        }
        char* pamheadertestoutput = GetFileNameForFrameType( "pamheader", frametype, "wav" );
        writer.Save( buffer, pamheadertestoutput, Wave::WaveFileWriter::WAV );
        PrintLog( pool_setf("below filename: '%s'\n", writer.GetFileName()) );
        PrintLog("file saved!\n");
        writer.Close();
        buffer.drop();
    } catch (std::exception ex) {
        PrintLog(pool_setf("Error loading pam file and storing to wav file: %s\n", ex.what()));
        fail = 1;
    } return fail;
}